<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extensions Developer on Project Flogo - Docs and Tutorials</title>
    <link>https://tibcosoftware.github.io/flogo/extensions-developer/</link>
    <description>Recent content in Extensions Developer on Project Flogo - Docs and Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate>
    
	<atom:link href="https://tibcosoftware.github.io/flogo/extensions-developer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building your first activity</title>
      <link>https://tibcosoftware.github.io/flogo/extensions-developer/create-activity/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/extensions-developer/create-activity/</guid>
      <description>Creating a new activity for Project Flogo is not that hard! Let&amp;rsquo;s walk through the steps required to create a simple activity.
Please make sure you&amp;rsquo;ve installed the flogo CLI tools, golint and updated your path to have the $GOPATH/bin folder included. For instructions how to do that, please check here
 The basic framework The easiest way to start creating activities is to have the flogogen CLI create the basic framework for you.</description>
    </item>
    
    <item>
      <title>Continuously testing Flogo activities</title>
      <link>https://tibcosoftware.github.io/flogo/extensions-developer/continuously-testing-flogo-activities/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/extensions-developer/continuously-testing-flogo-activities/</guid>
      <description>Depending on where you store the source code and how publicly you want to have the code available you have a few options to continuously testing Flogo activities. Let&amp;rsquo;s look at Jenkins when using a local git server and Travis-CI for activities on GitHub
Intro The project structure we&amp;rsquo;ll use has separate folders for activities and triggers. A sample layout would look like this:
├───&amp;lt;Repo root&amp;gt; │ └───activity | | └───&amp;lt;my-activity&amp;gt; | | |───&amp;lt;all my files&amp;gt; │ └───trigger | └───&amp;lt;my-trigger&amp;gt; | |───&amp;lt;all my files&amp;gt;  A real life repository I created looks like this.</description>
    </item>
    
  </channel>
</rss>